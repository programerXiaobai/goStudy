反射应用场景
1.序列化、反序列化：把数据序列化成二进制或 json 形式，在反序列化的时候需要将二进制或文本格式反序列化成 go 等到结构体，这种情况下不知道对应成 go 语言的什么类型
2.数据库的orm 工具，可以把表中某一行的数据查询出来映射成 go 的结构体去使用，这时候也不知道他们的 格式
3.配置文件的解析，比如 yaml，把配置文件中的配置项加载出来赋值给程序中的某些结构体变量

自己编程的时候很少涉及到反射，一般都是在框架中使用的
因为反射容易引起panic，而是是运行的时候才panic，使用反射使代码也难懂，使用反射代码效率也低

在反射中有类型Type 和 种类Kind，因为可以使用 type 关键字去构造很多的自定义类型，而Kind 是底层的类型。有时候我们会需要知道他们的种类，从而提供不同的逻辑

IsNil() 可以查看 通道、函数、接口、指针、切片 他们是否是空的，如果不是这几个类型，会 panic
IsValid() 可以查看v 是否持有一个值，如果不持有值，会返回 false。此时 v 除了 IsValid,String,Kind 之外的方法都不会调用，否则 panic